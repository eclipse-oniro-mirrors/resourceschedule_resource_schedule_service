diff --git a/bundle.json b/bundle.json
index 91d53cb2fa8faa28b892cd75cfe10f0040eb68fc..b203e32db2477976108acebb16d088b21905f46c 100644
--- a/bundle.json
+++ b/bundle.json
@@ -73,7 +73,8 @@
         "av_session",
         "json",
         "libxml2",
-        "jsoncpp"
+        "jsoncpp",
+        "runtime_core"
       ]
     },
     "build": {
@@ -87,6 +88,7 @@
           "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/innerkits/ressched_client:ressched_client",
           "//foundation/resourceschedule/resource_schedule_service/ressched_executor/interfaces/innerkits/ressched_executor_client:resschedexe_client",
           "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/kits/js/napi/systemload:systemload",
+          "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/kits/ets/taihe/systemload:systemload_taihe",
           "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/kits/js/napi/background_process_manager:backgroundprocessmanager_napi",
           "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/kits/c/background_process_manager:background_process_manager",
           "//foundation/resourceschedule/resource_schedule_service/ressched/common:ressched_common_utils"
@@ -186,6 +188,9 @@
             ]
           },
           "name": "//foundation/resourceschedule/resource_schedule_service/ressched/common:ressched_common_utils"
+        },
+        {
+          "name":"//foundation/resourceschedule/resource_schedule_service/ressched_executor/interfaces/kits/ets/taihe/system_load:systemload_taihe"
         }
       ],
       "test": [
diff --git a/ressched/interfaces/kits/ets/taihe/systemload/BUILD.gn b/ressched/interfaces/kits/ets/taihe/systemload/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..f5743c0f67302a545994041eac85039be45aeef3
--- /dev/null
+++ b/ressched/interfaces/kits/ets/taihe/systemload/BUILD.gn
@@ -0,0 +1,84 @@
+# Copyright (c) 2025 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/config/components/ets_frontend/ets2abc_config.gni")
+import("//build/ohos.gni")
+import("//build/ohos/taihe_idl/taihe.gni")
+
+subsystem_name = "resourceschedule"
+part_name = "resource_schedule_service"
+taihe_generated_file_path = "$taihe_file_path/out/$subsystem_name/$part_name/systemload"
+
+copy_taihe_idl("copy_systemload_taihe") {
+  sources = [ "idl/ohos.resourceschedule.systemload.taihe" ]
+}
+
+ohos_taihe("run_taihe") {
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  deps = [ ":copy_systemload_taihe" ]
+  outputs = [
+    "$taihe_generated_file_path/src/ohos.resourceschedule.systemload.ani.cpp",
+    "$taihe_generated_file_path/src/ohos.resourceschedule.systemload.abi.c",
+  ]
+}
+
+taihe_shared_library("systemload_taihe_native") {
+  branch_protector_ret = "pac_ret"
+  sanitize = {
+    cfi = true
+    cfi_cross_dso = true
+    debug = false
+  }
+
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  subsystem_name = "$subsystem_name"
+  part_name = "$part_name"
+  sources = get_target_outputs(":run_taihe")
+  include_dirs = [ "../../../../../common/include" ] 
+  sources += [
+    "src/ani_constructor.cpp",
+    "src/ohos.resourceschedule.systemload.impl.cpp",
+  ]
+  deps = [
+    ":run_taihe",
+    "../../../../innerkits/ressched_client:ressched_client",
+  ]
+
+  external_deps = [
+    "c_utils:utils",
+    "hilog:libhilog",
+  ]
+}
+
+generate_static_abc("systemload_abc") {
+  base_url = "$taihe_generated_file_path"
+  files = [ "$taihe_generated_file_path/@ohos.resourceschedule.systemload.ets" ]
+  is_boot_abc = "True"
+  device_dst_file = "/system/framework/systemload_abc.abc"
+  dependencies = [ ":run_taihe" ]
+}
+
+ohos_prebuilt_etc("systemload_etc") {
+  source = "$target_out_dir/systemload_abc.abc"
+  module_install_dir = "framework"
+  part_name = "$part_name"
+  subsystem_name = "$subsystem_name"
+  deps = [ ":systemload_abc" ]
+}
+
+group("systemload_taihe") {
+  deps = [
+    ":systemload_taihe_native",
+    ":systemload_etc",
+  ]
+}
\ No newline at end of file
diff --git a/ressched/interfaces/kits/ets/taihe/systemload/idl/ohos.resourceschedule.systemload.taihe b/ressched/interfaces/kits/ets/taihe/systemload/idl/ohos.resourceschedule.systemload.taihe
new file mode 100644
index 0000000000000000000000000000000000000000..27cc3bb7d58a0d2b0d9a52f09df2018f8c7f2353
--- /dev/null
+++ b/ressched/interfaces/kits/ets/taihe/systemload/idl/ohos.resourceschedule.systemload.taihe
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@!sts_inject("""
+    loadLibrary("systemload_taihe_native.z");
+""")
+@!namespace("@ohos.resourceschedule.systemload", "systemLoad")
+enum SystemLoadLevel: i32 {LOW = 0, NORMAL = 1, MEDIUM = 2, HIGH = 3, OVERHEATED = 4, WARNING = 5, EMERGENCY = 6, ESCAPE = 7}
+
+@!sts_inject("""
+    export function on(type: "systemLoadChange", callback:(level: SystemLoadLevel) => void) {
+        on("systemLoadChange", callback, callback);
+    }
+    export function off(type: "systemLoadChange", callback:(level: SystemLoadLevel) => void) {
+        on("systemLoadChange", callback, callback);
+    }
+""")
+
+@on_off
+function onSystemLoadChange(callback: (level: SystemLoadLevel) => void, opq: Opaque) : void;
+
+@on_off
+function offSystemLoadChange(callback: (level: SystemLoadLevel) => void, opq: Opaque) : void;
+
+@gen_promise("getLevel")
+function getLevelSync(): SystemLoadLevel;
\ No newline at end of file
diff --git a/ressched/interfaces/kits/ets/taihe/systemload/src/ani_constructor.cpp b/ressched/interfaces/kits/ets/taihe/systemload/src/ani_constructor.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..9bcf21d0e87b4a62a31be7f5a127d33443b012ca
--- /dev/null
+++ b/ressched/interfaces/kits/ets/taihe/systemload/src/ani_constructor.cpp
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "taihe/runtime.hpp"
+#include "ohos.resourceschedule.systemload.ani.hpp"
+ANI_EXPORT ani_status ANI_Constructor(ani_vm *vm, uint32_t *result)
+{
+    ani_env *env;
+    if (ANI_OK != vm->GetEnv(ANI_VERSION_1, &env)) {
+        return ANI_ERROR;
+    }
+    if (ANI_OK != ohos::resourceschedule::systemload::ANIRegister(env)) {
+        std::cerr << "Error from ohos::resourceschedule::systemload::ANIRegister" << std::endl;
+        return ANI_ERROR;
+    }
+    *result = ANI_VERSION_1;
+    return ANI_OK;
+}
\ No newline at end of file
diff --git a/ressched/interfaces/kits/ets/taihe/systemload/src/ohos.resourceschedule.systemload.impl.cpp b/ressched/interfaces/kits/ets/taihe/systemload/src/ohos.resourceschedule.systemload.impl.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..7bf4693e1433a258133cf588d70aead7a70f466a
--- /dev/null
+++ b/ressched/interfaces/kits/ets/taihe/systemload/src/ohos.resourceschedule.systemload.impl.cpp
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ohos.resourceschedule.systemload.proj.hpp"
+#include "ohos.resourceschedule.systemload.impl.hpp"
+#include "taihe/runtime.hpp"
+#include "stdexcept"
+#include "res_sched_client.h"
+#include "res_sched_log.h"
+
+using namespace taihe;
+using namespace ohos::resourceschedule::systemload;
+using namespace OHOS::ResourceSchedule;
+using namespace OHOS;
+namespace {
+class SystemloadCallback : public ResSchedSystemloadNotifierClient {
+private:
+    std::shared_ptr<taihe::callback<void(SystemLoadLevel)>> innerCallback_ = nullptr;
+public:
+    explicit SystemloadCallback(std::shared_ptr<taihe::callback<void(SystemLoadLevel)>> callback)
+        : innerCallback_(callback) {}
+    virtual ~SystemloadCallback() = default;
+    void OnSystemloadLevel(int32_t level)
+    {
+        (*innerCallback_)(SystemLoadLevel(static_cast<SystemLoadLevel::key_t>(level)));
+    }
+    using CallbackPair = std::pair<ani_ref, sptr<SystemloadCallback>>;
+    static std::list<CallbackPair> callbackList_;
+    static std::mutex callbackMutex_;
+};
+std::list<SystemloadCallback::CallbackPair> SystemloadCallback::callbackList_ = {};
+std::mutex SystemloadCallback::callbackMutex_;
+
+void onSystemLoadChange(callback_view<void(SystemLoadLevel)> callback, uintptr_t opq)
+{
+    RESSCHED_LOGD("Register Systemload Callback");
+    std::lock_guard<std::mutex> autoLock(SystemloadCallback::callbackMutex_);
+    auto iter = SystemloadCallback::callbackList_.begin();
+    ani_ref ref = (ani_ref)(opq);
+    ani_env* env = taihe::get_env();
+    for (; iter != SystemloadCallback::callbackList_.end(); iter++) {
+        ani_boolean isEquals = false;
+        if (env->Reference_StrictEquals(iter->first, ref, &isEquals) == ANI_OK && isEquals) {
+            RESSCHED_LOGW("Register a exist callback");
+            return;
+        }
+    }
+    std::shared_ptr<taihe::callback<void(SystemLoadLevel)>> taiheCallback =
+        std::make_shared<taihe::callback<void(SystemLoadLevel)>>(callback);
+    sptr<SystemloadCallback> systemloadListener =
+        new (std::nothrow)SystemloadCallback(taiheCallback);
+    ResSchedClient::GetInstance().RegisterSystemloadNotifier(systemloadListener);
+    SystemloadCallback::callbackList_.emplace_back(std::move(ref), systemloadListener);
+    RESSCHED_LOGD("Register Systemload Callback end");
+}
+
+void offSystemLoadChange(callback_view<void(SystemLoadLevel)> callback, uintptr_t opq)
+{
+    RESSCHED_LOGD("UnRegister Systemload Callback");
+    std::lock_guard<std::mutex> autoLock(SystemloadCallback::callbackMutex_);
+    auto iter = SystemloadCallback::callbackList_.begin();
+    ani_ref ref = (ani_ref)(opq);
+    ani_env* env = taihe::get_env();
+    for (; iter != SystemloadCallback::callbackList_.end(); iter++) {
+        ani_boolean isEquals = false;
+        if (env->Reference_StrictEquals(iter->first, ref, &isEquals) == ANI_OK && isEquals) {
+            ResSchedClient::GetInstance().UnRegisterSystemloadNotifier(iter->second);
+            SystemloadCallback::callbackList_.erase(iter);
+            RESSCHED_LOGD("UnRegister Systemload Callback end");
+            break;
+        }
+    }
+}
+
+SystemLoadLevel getLevelSync()
+{
+    return SystemLoadLevel(static_cast<SystemLoadLevel::key_t>(ResSchedClient::GetInstance().GetSystemloadLevel()));
+}
+} // namespace
+TH_EXPORT_CPP_API_onSystemLoadChange(onSystemLoadChange);
+TH_EXPORT_CPP_API_offSystemLoadChange(offSystemLoadChange);
+TH_EXPORT_CPP_API_getLevelSync(getLevelSync);
\ No newline at end of file
