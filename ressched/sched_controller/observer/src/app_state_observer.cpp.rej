diff a/ressched/sched_controller/observer/src/app_state_observer.cpp b/ressched/sched_controller/observer/src/app_state_observer.cpp	(rejected hunks)
@@ -197,80 +169,54 @@ void RmsApplicationStateObserver::MarshallingProcessData(const ProcessData &proc
     payload["hostPid"] = std::to_string(processData.hostPid);
     payload["callerPid"] = std::to_string(processData.callerPid);
     payload["callerUid"] = std::to_string(processData.callerUid);
+    payload["isPreloadModule"] = std::to_string(processData.isPreloadModule);
 }
 
 void RmsApplicationStateObserver::OnProcessCreated(const ProcessData &processData)
 {
     if (!ValidateProcessData(processData)) {
-        CGS_LOGE("%{public}s : validate process data failed!", __func__);
+        RESSCHED_LOGE("%{public}s : validate process data failed!", __func__);
         return;
     }
-    auto cgHandler = SchedController::GetInstance().GetCgroupEventHandler();
-    if (cgHandler) {
-        cgHandler->PostTask([cgHandler, processData] {
-            cgHandler->HandleProcessCreated(processData);
-        });
-    }
 
     nlohmann::json payload;
     MarshallingProcessData(processData, payload);
-    ResSchedUtils::GetInstance().ReportDataInProcess(
+    ResSchedMgr::GetInstance().ReportData(
         ResType::RES_TYPE_PROCESS_STATE_CHANGE, ResType::ProcessStatus::PROCESS_CREATED, payload);
 }
 
 void RmsApplicationStateObserver::OnProcessDied(const ProcessData &processData)
 {
     if (!ValidateProcessData(processData)) {
-        CGS_LOGE("%{public}s : validate process data failed!", __func__);
+        RESSCHED_LOGE("%{public}s : validate process data failed!", __func__);
         return;
     }
-    auto cgHandler = SchedController::GetInstance().GetCgroupEventHandler();
-    if (cgHandler) {
-        auto uid = processData.uid;
-        auto pid = processData.pid;
-        auto bundleName = processData.bundleName;
-
-        cgHandler->PostTask([cgHandler, uid, pid, bundleName] {
-            cgHandler->HandleProcessDied(uid, pid, bundleName);
-        });
-    }
 
     nlohmann::json payload;
     MarshallingProcessData(processData, payload);
-    ResSchedUtils::GetInstance().ReportDataInProcess(
+    ResSchedMgr::GetInstance().ReportData(
         ResType::RES_TYPE_PROCESS_STATE_CHANGE, ResType::ProcessStatus::PROCESS_DIED, payload);
-    ReportProcessStateInProcess((int32_t)ResType::ProcessStatus::PROCESS_DIED,
+    ResSchedMgr::GetInstance().ReportProcessStateInProcess((int32_t)ResType::ProcessStatus::PROCESS_DIED,
         (int32_t)processData.pid);
 }
 
 void RmsApplicationStateObserver::OnApplicationStateChanged(const AppStateData &appStateData)
 {
     if (!ValidateAppStateData(appStateData)) {
-        CGS_LOGE("%{public}s : validate app state data failed!", __func__);
+        RESSCHED_LOGE("%{public}s : validate app state data failed!", __func__);
         return;
     }
 
-    auto cgHandler = SchedController::GetInstance().GetCgroupEventHandler();
-    if (cgHandler) {
-        auto uid = appStateData.uid;
-        auto pid = appStateData.pid;
-        auto bundleName = appStateData.bundleName;
-        auto state = appStateData.state;
-
-        cgHandler->PostTask([cgHandler, uid, pid, bundleName, state] {
-            cgHandler->HandleApplicationStateChanged(uid, pid, bundleName, state);
-        });
-    }
-
     nlohmann::json payload;
     payload["pid"] = std::to_string(appStateData.pid);
     payload["uid"] = std::to_string(appStateData.uid);
     payload["bundleName"] = appStateData.bundleName;
     payload["extensionType"] = std::to_string(static_cast<uint32_t>(appStateData.extensionType));
     payload["isPreload"] = std::to_string(appStateData.isPreloadModule);
-    ResSchedUtils::GetInstance().ReportDataInProcess(ResType::RES_TYPE_APP_STATE_CHANGE, appStateData.state,
+    payload["state"] = std::to_string(appStateData.state);
+    ResSchedMgr::GetInstance().ReportData(ResType::RES_TYPE_APP_STATE_CHANGE, appStateData.state,
         payload);
-    ResSchedUtils::GetInstance().ReportAppStateInProcess(appStateData.state, appStateData.pid);
+    ResSchedMgr::GetInstance().ReportAppStateInProcess(appStateData.state, appStateData.pid);
 }
 
 void RmsApplicationStateObserver::MarshallingAppStateData(const AppStateData &appStateData, nlohmann::json &payload)
